// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using mCore.Services.Process.Data;

namespace mCore.Services.Process.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180506212229_AddProcessModel")]
    partial class AddProcessModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("mCore.Services.Process.Core.Definition.ActionDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid?>("UserTaskId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserTaskId");

                    b.ToTable("ActionDefinition");
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Definition.ActivityDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid?>("ProcessDefinitionId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProcessDefinitionId");

                    b.ToTable("ActivityDefinition");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ActivityDefinition");
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Definition.ProcessDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid?>("InitialActivityId")
                        .IsRequired();

                    b.Property<bool>("IsSuspended");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("InitialActivityId")
                        .IsUnique();

                    b.ToTable("ProcessDefinition");
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Definition.Transition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DestinationId");

                    b.Property<Guid>("ProcessDefinitionId");

                    b.Property<Guid>("SourceId");

                    b.Property<int>("TransitionType");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("ProcessDefinitionId");

                    b.HasIndex("SourceId");

                    b.ToTable("Transition");
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Runtime.ActivityInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivityDefinitionId")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<TimeSpan?>("Duration");

                    b.Property<DateTime?>("EndTime");

                    b.Property<Guid?>("ProcessInstanceId")
                        .IsRequired();

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ActivityDefinitionId");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("ActivityInstance");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ActivityInstance");
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Runtime.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActionId");

                    b.Property<string>("Message");

                    b.Property<Guid?>("TaskId")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("TaskId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Runtime.ProcessInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessKey")
                        .HasMaxLength(200);

                    b.Property<TimeSpan?>("Duration");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<Guid>("ProcessDefinitionId");

                    b.Property<DateTime>("StartTime");

                    b.Property<Guid>("StartUserId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ProcessDefinitionId");

                    b.ToTable("ProcessInstance");
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Definition.UserTask", b =>
                {
                    b.HasBaseType("mCore.Services.Process.Core.Definition.ActivityDefinition");


                    b.ToTable("UserTask");

                    b.HasDiscriminator().HasValue("UserTask");
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Runtime.Task", b =>
                {
                    b.HasBaseType("mCore.Services.Process.Core.Runtime.ActivityInstance");

                    b.Property<Guid?>("AssigneeId");

                    b.Property<DateTime?>("ClaimTime");

                    b.Property<string>("Name");

                    b.Property<int>("Priority");

                    b.ToTable("Task");

                    b.HasDiscriminator().HasValue("Task");
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Definition.ActionDefinition", b =>
                {
                    b.HasOne("mCore.Services.Process.Core.Definition.UserTask")
                        .WithMany("Actions")
                        .HasForeignKey("UserTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Definition.ActivityDefinition", b =>
                {
                    b.HasOne("mCore.Services.Process.Core.Definition.ProcessDefinition")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Definition.ProcessDefinition", b =>
                {
                    b.HasOne("mCore.Services.Process.Core.Definition.ActivityDefinition", "InitialActivity")
                        .WithOne()
                        .HasForeignKey("mCore.Services.Process.Core.Definition.ProcessDefinition", "InitialActivityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Definition.Transition", b =>
                {
                    b.HasOne("mCore.Services.Process.Core.Definition.ActivityDefinition", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("mCore.Services.Process.Core.Definition.ProcessDefinition")
                        .WithMany("Transitions")
                        .HasForeignKey("ProcessDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mCore.Services.Process.Core.Definition.ActivityDefinition", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Runtime.ActivityInstance", b =>
                {
                    b.HasOne("mCore.Services.Process.Core.Definition.ActivityDefinition", "ActivityDefinition")
                        .WithMany()
                        .HasForeignKey("ActivityDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("mCore.Services.Process.Core.Runtime.ProcessInstance", "ProcessInstance")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Runtime.Comment", b =>
                {
                    b.HasOne("mCore.Services.Process.Core.Definition.ActionDefinition")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("mCore.Services.Process.Core.Runtime.Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mCore.Services.Process.Core.Runtime.ProcessInstance", b =>
                {
                    b.HasOne("mCore.Services.Process.Core.Definition.ProcessDefinition")
                        .WithMany()
                        .HasForeignKey("ProcessDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
